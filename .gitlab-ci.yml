# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.

cache:
  paths:
    - .cache/pip
    - venv/

before_script:
  - python3 -V  # Print out python version for debugging
  - python3 -m venv venv
  - source venv/bin/activate
  - pip3 install -U pip


build_wheel:
  stage: build
  script:
    - pip3 install wheel
    - 'sed -ri "s/^python-Levenshtein==0\.12\.0/python-Levenshtein-wheels==0\.13\.2/" requirements.txt ' # Remplace python-Levenshtein-wheels
    - 'sed -ri "s/^sphinxcontrib-openapi=/#sphinxcontrib-openapi=/" requirements.txt'
    - cat requirements.txt
    - python3 setup.py bdist_wheel
  artifacts:
    paths:
      - dist/*.whl
    expire_in: 1 week
  tags:
    - python-dinp-tscapx004r


upload_wheel:
  stage: deploy
  script:
    - pip3 install twine
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/
  tags:
    - python-dinp-tscapx004r
  when: manual


staging:
  stage: deploy
  variables:
    V_INSTALL_DIR: "${INSTALL_DIR}/1.0"
    GIT_STRATEGY: none
    VERSION_TAG: 1.1
  script:
    - if [ -z $MODEL_NAME ]; then echo "MODEL_NAME not set"; exit 1; fi
    - if [ -z $MODEL_VERSION ]; then echo "MODEL_VERSION not set"; exit 1; fi
    - if [ -z $INSTALL_DIR ]; then echo "INSTALL_DIR not set"; exit 1; fi
    - if [ -z $nAPP_PORT ]; then echo "nAPP_PORT not set"; exit 1; fi
    - ipath=${INSTALL_DIR}/${VERSION_TAG}
    - echo Installation dans $ipath
    - rm -rf ${INSTALL_DIR}/${VERSION_TAG}
    - python3 -m venv ${INSTALL_DIR}/${VERSION_TAG}
    - source ${INSTALL_DIR}/${VERSION_TAG}/bin/activate
    - pip3 install -U pip
    - echo "manylinux1_compatible = True" > _manylinux.py # Pour forcer l'utilisation de manylinux1 car avec python_levenshtein_wheels, y'a un souci avec version plus rÃ©cente
    - pip3 install dist/${CI_PROJECT_NAME}*.whl
    - 'curl --insecure --header "JOB-TOKEN: ${CI_JOB_TOKEN}" ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/sivnorm_referentiel/${MODEL_VERSION}/sivnorm_referentiel.tar -o sivnorm_referentiel.tar'
    - mkdir ${INSTALL_DIR}/1.0/models
    - tar xvf sivnorm_referentiel.tar -C ${INSTALL_DIR}/${VERSION_TAG}/models
    - echo -e "[config]\nBASE_MODEL_PATH=${INSTALL_DIR}/${VERSION_TAG}/models/${MODEL_NAME}\nAPP_PORT=${APP_PORT}\n" > ${INSTALL_DIR}/1.0/config.ini
    - rm -rf ${INSTALL_DIR}/current
    - ln -s ${INSTALL_DIR}/1.0 ${INSTALL_DIR}/current
  tags:
    - python-dinp-tscapx004r
  

