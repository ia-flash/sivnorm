---
swagger: '2.0'
basePath: "/sivnorm"
paths:
  "/clean":
    get:
      responses:
        '200':
          description: Success
          schema:
            "$ref": "#/definitions/CleanOutput"
      summary: Clean brand and model field
      operationId: get_clean
      parameters:
      - name: marque
        in: query
        type: string
        description: 'Vehicle brand (eg: Renault)'
      - name: modele
        in: query
        type: string
        description: 'Vehicle model (eg: Clio)'
      tags:
      - default
      # For AWS Integration
      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        # Replace AWS_REGION and ACCOUNT_ID in uri
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:016363657960:function:CleanFunction/invocations"

  "/norm/{table_ref_name}":
    parameters:
    - description: Reference table [siv,cardisiac,siv_caradisiac]
      name: table_ref_name
      in: path
      required: true
      type: string
    post:
      responses:
        '200':
          description: "CSV file containing matching brand model and score like: \n\n
            RENAULT,CLIO,1.0\n RENAULT,CLIO,0.945 \n AUDI, TTS,1.0 \n RENAULT,CLIO,0.945
            \n RENAULT,CLIO,0.95 \n RENAULT,CLIO,1.0"
      summary: Normalize a table of brand and model using a defined referential table
      operationId: post_normalization
      parameters:
      - name: file
        in: formData
        type: file
        description: "CSV file with multiple brand model lines with no header. Like:
          \n\n renault,clio \n renault,clio2 \n audi,TTs \n renault,renault clio7
          \n renault,clio7 RT/RN"
      produces:
        - text/csv
      consumes:
        - multipart/form-data
      tags:
        - default
      # For AWS Integration
      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true
      x-amazon-apigateway-binary-media-types:
        - '*/*'
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        # Replace AWS_REGION and ACCOUNT_ID in uri
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:016363657960:function:NormFunction/invocations"

    get:
      responses:
        '200':
          description: Success
          schema:
            "$ref": "#/definitions/NormalizedOutput"
      summary: Normalize a single brand and model using a defined referential table
      operationId: get_normalization
      parameters:
      - name: marque
        in: query
        type: string
        description: 'Vehicle brand (eg: Renault)'
      - name: modele
        in: query
        type: string
        description: 'Vehicle model (eg: Clio)'
      tags:
      - default
      # For AWS Integration
      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        # Replace AWS_REGION and ACCOUNT_ID in uri
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:016363657960:function:NormFunction/invocations"

    options:
      responses:
        '200':
          description: Success
      summary: Preflight request
      tags:
      - default
      # For AWS Integration
      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        # Replace AWS_REGION and ACCOUNT_ID in uri
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:016363657960:function:NormFunction/invocations"

info:
  title: SivNorm
  version: '1.0'
  description: Match flou de la marque et modèle des véhicules dans la                 carte
    grise à partir d'un référentiel
produces:
- application/json
consumes:
- application/json
tags:
- name: default
  description: Default namespace
definitions:
  NormalizedOutput:
    properties:
      modele:
        type: string
        description: Matched model
      marque:
        type: string
        description: Matched brand
      score_marque:
        type: integer
        description: Matching score for brand
        minimum: 0
        maximum: 100
      score_modele:
        type: integer
        description: Matching score for model
        minimum: 0
        maximum: 100
      score:
        type: number
        description: Global matching score. Combination of score_marque and score_modele
        minimum: 0
        maximum: 1
    type: object
  CleanOutput:
    properties:
      modele:
        type: string
        description: Cleaned model
      marque:
        type: string
        description: Cleaned brand
    type: object
responses:
  ParseError:
    description: When a mask can't be parsed
  MaskError:
    description: When any error occurs on mask
